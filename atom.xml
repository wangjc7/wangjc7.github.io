<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>橙子&#39;s Blog</title>
  
  <subtitle>挑战未知</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-18T07:07:16.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>andrew.wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>superset安装</title>
    <link href="http://yoursite.com/2018/09/18/superset%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2018/09/18/superset安装/</id>
    <published>2018-09-18T06:48:50.000Z</published>
    <updated>2018-09-18T07:07:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="superset"><a href="#superset" class="headerlink" title="superset"></a>superset</h2><p>Superset 是 Airbnb 开源的数据分析与可视化平台，同时也是由 Python 语言构建的轻量级 BI 系统。Superset 可实现对 TB 量级数据进行处理，兼容常见的数十种关系或非关系型数据库，并在内部实现 SQL 编辑查询等操作。除此之外，基于 Web 服务的 Superset 可实现多用户协使用，并可针对不同角色进行权限管理。</p><h2 id="Install-for-linux"><a href="#Install-for-linux" class="headerlink" title="Install(for linux):"></a>Install(for linux):</h2><pre><code>1.安装pip2.安装virtualenv3.安装mysqlclient,impyla,python-ldap,redis4.安装supersetpip install -i https://pypi.tuna.tsinghua.edu.cn/simple superset==0.22.15.修改config.py配置文件，修改元数据存储为MysqlSQLALCHEMY_DATABASE_URI = &apos;mysql://username:password@ip/dbname?charset=utf8&apos;6.创建管理员用户和密码fabmanager create-admin --app superset7.初始化数据superset db upgrade8.创建默认角色和权限superset init9.启动：superset runserver -p 8388 -d   # -d为debug模式启动10.访问：http://ip:8388     admin/admin</code></pre><p>superser主页：<br><a href="https://github.com/apache/incubator-superset" target="_blank" rel="noopener">https://github.com/apache/incubator-superset</a>    </p><p>—end—</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;superset&quot;&gt;&lt;a href=&quot;#superset&quot; class=&quot;headerlink&quot; title=&quot;superset&quot;&gt;&lt;/a&gt;superset&lt;/h2&gt;&lt;p&gt;Superset 是 Airbnb 开源的数据分析与可视化平台，同时也是由 Python 语
      
    
    </summary>
    
      <category term="superset" scheme="http://yoursite.com/categories/superset/"/>
    
    
      <category term="data analysis" scheme="http://yoursite.com/tags/data-analysis/"/>
    
      <category term="superset" scheme="http://yoursite.com/tags/superset/"/>
    
  </entry>
  
  <entry>
    <title>Python_MySql语句插入中内容同时包含单引号和双引号的解决办法</title>
    <link href="http://yoursite.com/2018/09/16/Python-MySql%E8%AF%AD%E5%8F%A5%E6%8F%92%E5%85%A5%E4%B8%AD%E5%86%85%E5%AE%B9%E5%90%8C%E6%97%B6%E5%8C%85%E5%90%AB%E5%8D%95%E5%BC%95%E5%8F%B7%E5%92%8C%E5%8F%8C%E5%BC%95%E5%8F%B7%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2018/09/16/Python-MySql语句插入中内容同时包含单引号和双引号的解决办法/</id>
    <published>2018-09-16T14:07:11.000Z</published>
    <updated>2018-09-16T14:18:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>在python中调用MySQLdb模块插入数据信息，假设待输入信息data为：Hello’World”!</p><p>其中同时包含了单引号和双引号</p><p>一般插入语句为</p><pre><code>sql = &quot;insert into tb (my_str) values(&apos;%s&apos;)&quot; % (data)cursor.execute(sql)</code></pre><p>其中values(‘%s’)中的%s外面也要有引号，这个引号与data中的引号匹配导致了内容错误</p><p><strong>解决办法一:</strong></p><p>MySQLdb.escape_string()</p><p>在MySQLdb模块中自带针对mysql的转义函数escape_string()，直接调用即可</p><pre><code>sql = &quot;insert into tb (my_str) values(&apos;%s&apos;)&quot; % (MySQLdb.escape_string(data))cursor.execute(sql)</code></pre><p><strong>解决办法二</strong></p><p>cursor.execute()</p><p>cursor.execute()可以接受一个参数，也可以接受两个参数：</p><pre><code>cursor.execute(&quot;insert into tablename(c1,c2) values(%s, %s)&quot; , (value1,value2) );</code></pre><p>这种格式是接受两个参数，MySQLdb会自动替你对字符串进行转义和加引号，不必再自己进行转义</p><p>实例：</p><pre><code>#-*-coding: utf8 -*-from connectdb import connectDatabase; #connectDatabase是我自己定义的一个连接数据的函数import MySQLdb;def escape():    cnn = connectDatabase();    cursor = cnn.cursor();    name = &quot;\\&quot;;     name2 = &quot;\&quot;&quot;    print name,name2;    queryli = [(12,name),(12,name2)]    print queryli;    #cursor.executemany(&quot;insert into resource(cid,name) values(%s, %s)&quot;,queryli);    #接受两个参数，MySQLdb会自动替你对字符串进行转义和加引号，不必再自己进行转义    #执行完此语句之后，resource表中多了一条记录： 12   \    #但如果这么写，cursor.execute(&quot;insert into resource(cid,name) values(%s, %s)&quot; % (12,name) );    #这种格式是利用python的字符串格式化自己生成一个query，也就是传给execute一个参数，    #此时必须自己对字符串转义和增加引号，即上边的语句是错误的，应该修改为：    #name = MySQLdb.escape_string(name);    #cursor.execute(&quot;insert into resource(cid,name) values(%s, &apos;%s&apos;)&quot; % (12,name) );    #这样插入的记录才和(1)一样：12   \    cursor.execute(&quot;insert into resource(cid,name) values(%s, %s)&quot; , (12,name) );    cursor.close();     cnn.commit();    cnn.close();if __name__ == &quot;__main__&quot;:    escape();</code></pre><p><strong>解决办法三</strong></p><p>当然也可以自己转义字符</p><p>将data变为下面的形式,再插入数据库就正确了<br>Hello\’World\”!</p><p>具体在python中的转义函数如下：</p><pre><code>def transferContent(self, content):        if content is None:            return None        else:            string = &quot;&quot;            for c in content:                if c == &apos;&quot;&apos;:                    string += &apos;\\\&quot;&apos;                elif c == &quot;&apos;&quot;:                    string += &quot;\\\&apos;&quot;                elif c == &quot;\\&quot;:                    string += &quot;\\\\&quot;                else:                    string += c            return string</code></pre><p>—end—</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在python中调用MySQLdb模块插入数据信息，假设待输入信息data为：Hello’World”!&lt;/p&gt;
&lt;p&gt;其中同时包含了单引号和双引号&lt;/p&gt;
&lt;p&gt;一般插入语句为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sql = &amp;quot;insert into tb (my_s
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="MySQLdb" scheme="http://yoursite.com/tags/MySQLdb/"/>
    
      <category term="escape string" scheme="http://yoursite.com/tags/escape-string/"/>
    
  </entry>
  
  <entry>
    <title>Windows与Linux回车换行符</title>
    <link href="http://yoursite.com/2018/09/16/Windows%E4%B8%8ELinux%E5%9B%9E%E8%BD%A6%E6%8D%A2%E8%A1%8C%E7%AC%A6/"/>
    <id>http://yoursite.com/2018/09/16/Windows与Linux回车换行符/</id>
    <published>2018-09-16T13:25:23.000Z</published>
    <updated>2018-09-16T13:30:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="回车、换行的区别"><a href="#回车、换行的区别" class="headerlink" title="回车、换行的区别"></a>回车、换行的区别</h3><p>回车”（Carriage Return）和“换行”（Line Feed）</p><pre><code>符号        ASCII码        意义\n          10            换行\r          13            回车CR</code></pre><p>‘\r’ 回车，回到当前行的行首，而不会换到下一行，如果接着输出的话，本行以前的内容会被逐一覆盖；</p><p>‘\n’ 换行，换到当前位置的下一行，而不会回到行首；</p><p>Unix系统里，每行结尾只有“&lt;换行&gt;”，即”\n”；<br>Windows系统里面，每行结尾是“&lt;回车&gt;&lt;换行&gt;”，即“\r\n”；<br>Mac系统里，每行结尾是“&lt;回车&gt;”，即”\r”；。</p><p>一个直接后果是，Unix/Mac系统下的文件在Windows里打开的话，所有文字会变成一行；而Windows里的文件在Unix/Mac下打开的话，在每行的结尾可能会多出一个^M符号。</p><p>—end—</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;回车、换行的区别&quot;&gt;&lt;a href=&quot;#回车、换行的区别&quot; class=&quot;headerlink&quot; title=&quot;回车、换行的区别&quot;&gt;&lt;/a&gt;回车、换行的区别&lt;/h3&gt;&lt;p&gt;回车”（Carriage Return）和“换行”（Line Feed）&lt;/p&gt;
&lt;pre&gt;
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="/r,/n" scheme="http://yoursite.com/tags/r-n/"/>
    
  </entry>
  
  <entry>
    <title>python发送邮件</title>
    <link href="http://yoursite.com/2018/09/13/python%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/09/13/python发送邮件/</id>
    <published>2018-09-13T11:16:23.000Z</published>
    <updated>2018-09-13T11:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>代码</strong>：</p><p>emailhelper.py</p><pre><code># -*- coding: UTF-8 -*-import sysimport platformimport smtplibfrom email.header import Headerfrom email.mime.multipart import MIMEMultipartfrom email.mime.text import MIMEText#  SMTP 服务mail_host = &quot;smtp.company.com&quot;  # 设置服务器mail_user = &quot;username@company.com&quot;  # 用户名mail_pass = &quot;password&quot;  # 口令def send_mail( receivers, subject, content, filenames=None):    &quot;&quot;&quot;    :param sender:string    :param receivers:list[string]  # 如果收件人为多个格式[&apos;xx@a.com&apos;,&apos;yy@b.com&apos;]    subject：string    content: string    filename: string    :return:    &quot;&quot;&quot;    sender=mail_user    filenames = [] if filenames is None else filenames  #附件名称    try:        message = MIMEMultipart()        message.attach(MIMEText(content, &apos;plain&apos;, &apos;utf-8&apos;))        message[&apos;Subject&apos;] = Header(subject, &apos;utf-8&apos;)        # message[&apos;to&apos;]格式为：xx@aa.com, yy@bb.com        message[&apos;to&apos;] = &apos;,&apos;.join(receivers)        # 如果附件名称大于0个字符        for filename in filenames:            if filename is not None and len(filename.strip()) &gt; 0:                att1 = MIMEText(open(filename, &apos;rb&apos;).read(), &apos;base64&apos;, &apos;utf-8&apos;)                att1[&quot;Content-Type&quot;] = &apos;application/octet-stream&apos;                # 这里的filename可以任意写，写什么名字，邮件中显示什么名字                att1[&quot;Content-Disposition&quot;] = &apos;attachment; filename=&quot;%s&quot; filename                    message.attach(att1)        smtp_obj = smtplib.SMTP()        smtp_obj.connect(mail_host, 25)  # 25 为 SMTP 端口号        smtp_obj.login(mail_user, mail_pass)        smtp_obj.sendmail(sender, receivers, message.as_string())        smtp_obj.quit()        print &quot;邮件发送成功&quot;    except smtplib.SMTPException, e:        print &quot;Error: 无法发送邮件,code:%s&quot; % e.smtp_code    return</code></pre><p>—over—</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;emailhelper.py&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# -*- coding: UTF-8 -*-

import sys
import platform
import smtplib
from email.h
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="smtplib" scheme="http://yoursite.com/tags/smtplib/"/>
    
      <category term="email" scheme="http://yoursite.com/tags/email/"/>
    
  </entry>
  
  <entry>
    <title>Hive分组取TopN</title>
    <link href="http://yoursite.com/2018/09/13/Hive%E5%88%86%E7%BB%84%E5%8F%96TopN/"/>
    <id>http://yoursite.com/2018/09/13/Hive分组取TopN/</id>
    <published>2018-09-13T08:03:56.000Z</published>
    <updated>2018-09-13T08:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hive在0.11.0版本开始加入了row_number、rank、dense_rank分析函数，可以查询分组排序后的top值</p><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><p>row_number() over ([partition col1] [order by col2])</p><p>rank() over ([partition col1] [order by col2])</p><p>dense_rank() over ([partition col1] [order by col2])</p><p>它们都是根据col1字段分组，然后对col2字段进行排序，对排序后的每行生成一个行号，这个行号从1开始递增<br>col1、col2都可以是多个字段，用’,’分隔</p><p><strong>区别</strong>：</p><ol><li><p>row_number：不管col2字段的值是否相等，行号一直递增，比如：有两条记录的值相等，但一个是第一，一个是第二</p></li><li><p>rank：上下两条记录的col2相等时，记录的行号是一样的，但下一个col2值的行号递增N（N是重复的次数），比如：有两条并列第一，下一个是第三，没有第二</p></li><li><p>dense_rank：上下两条记录的col2相等时，下一个col2值的行号递增1，比如：有两条并列第一，下一个是第二</p></li></ol><p><strong>row_number可以实现分页查询</strong></p><h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><pre><code>hive&gt; create table t(name string, sub string, score int) row format delimited fields terminated by &apos;\t&apos;;</code></pre><p>数据在附件的a.txt里</p><pre><code>a chinese 98a english 90d chinese 88c english 82c math 98b math 89b chinese 79z english 90z math 89z chinese 80e math 99e english 87d english 90</code></pre><p><strong>1. row_number</strong></p><pre><code>hive (test)&gt; select *, row_number() over (partition by sub order by score) as od from t; </code></pre><p><strong>2. rank</strong></p><pre><code>hive (test)&gt; select *, rank() over (partition by sub order by score) as od from t; </code></pre><p><strong>3. dense_ran</strong></p><pre><code>hive (test)&gt; select *, dense_rank() over (partition by sub order by score desc) from t;</code></pre><p><strong>业务实例：</strong></p><p>统计每个学科的第一名</p><pre><code>select * from (select *, row_number() over (partition by sub order by score desc) as od from t ) t where od=1;</code></pre><p>统计每个学科的前三名</p><pre><code>select * from (select *, row_number() over (partition by sub order by score desc) as od from t ) t where od&lt;=3;</code></pre><p>语文成绩是80分的排名是多少</p><pre><code>hive (test)&gt; select od from (select *, row_number() over (partition by sub order by score desc) as od from t ) t where sub=&apos;chinese&apos; and score=80;</code></pre><p>分页查询</p><pre><code>hive (test)&gt; select * from (select *, row_number() over () as rn from t) t1 where rn between 1 and 5;</code></pre><p> 原文链接：</p><p> <a href="https://www.cnblogs.com/lishouguang/p/4560837.html" target="_blank" rel="noopener">https://www.cnblogs.com/lishouguang/p/4560837.html</a></p><p> —over—</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hive在0.11.0版本开始加入了row_number、rank、dense_rank分析函数，可以查询分组排序后的top值&lt;/p&gt;
&lt;h3 id=&quot;语法：&quot;&gt;&lt;a href=&quot;#语法：&quot; class=&quot;headerlink&quot; title=&quot;语法：&quot;&gt;&lt;/a&gt;语法：&lt;/h
      
    
    </summary>
    
      <category term="hive" scheme="http://yoursite.com/categories/hive/"/>
    
    
      <category term="hive" scheme="http://yoursite.com/tags/hive/"/>
    
      <category term="row_number rank dense_rank" scheme="http://yoursite.com/tags/row-number-rank-dense-rank/"/>
    
  </entry>
  
  <entry>
    <title>CDH集群时钟偏差警报</title>
    <link href="http://yoursite.com/2018/09/13/CDH%E9%9B%86%E7%BE%A4%E6%97%B6%E9%92%9F%E5%81%8F%E5%B7%AE%E8%AD%A6%E6%8A%A5/"/>
    <id>http://yoursite.com/2018/09/13/CDH集群时钟偏差警报/</id>
    <published>2018-09-13T07:24:32.000Z</published>
    <updated>2018-09-13T07:44:08.000Z</updated>
    
    <content type="html"><![CDATA[<p> CDH集群总是提示时钟偏差,但是查看ntpd服务是正常工作的. </p><p> OS Version:    CentOS Linux release 7.5.1804 (Core)</p><p> CDH Version:    CDH 5.8.4</p><p>于是google一下原理：</p><blockquote><p><strong>The clock NTP health check is executed by each agent running on nodes on your cluster.  The command executed is:</strong></p></blockquote><blockquote><p><strong>ntpdc -np</strong></p></blockquote><blockquote><p><strong>A timeout of 2 seconds is used, so if the ntp client does not return in 2 seconds, the health check will fail.</strong></p></blockquote><p>If there is a result, then the agent script will parse the result text and return a result metric that includes the clock offset.  this will be sent to the Host Monitor Management Service for processing.</p><p>You have 2 options here:  </p><p>If you are convinced there are no problems, you can turn off the Cloudera Manager Server Clock Offset Thresholds health check or adjust it as necessary in the Cloudera Manager management services.</p><p>Or, if you wish to troubleshoot, check the /var/log/cloudera-scm-agent/cloudera-scm-agent.log file for clues.<br>Search in that file for “ntpdc”.  If there are any errors running the command, a stack trace will be provided.</p><p>The agent merely parses the ntpdc output, so assuming your output looks something like this:</p><p>ntpdc -np</p><pre><code> remote           local      st poll reach  delay   offset    disp=======================================================================*132.163.4.101   10.17.81.194     1 1024  377 0.02972  0.001681 0.13664=198.55.111.5    10.17.81.194     2 1024  377 0.01395  0.002177 0.13667=50.116.55.65    10.17.81.194     2 1024  377 0.07263  0.001220 0.12172</code></pre><p>The script will look for a line that starts with an “*” character.  So, in our example:</p><p>*132.163.4.101   10.17.81.194     1 1024  377 0.02972  0.001681 0.13664</p><p>Then, it will get the ‘offset’ column.<br>This value is returned to the Host Monitor which, will pull the metric and filter it through your health check configuration to decide if it warrants an alert.</p><p>Lastly, I’m not aware that anything has changed in the offset health check between CM 5.3 and 5.4, so I would recommend troubleshooting this to try to figure out why clock is offset.  Timing is important in hadoop, so it is worth a look.</p><p>参考链接：</p><p><a href="https://community.cloudera.com/t5/Cloudera-Manager-Installation/Cloudera-5-4-x-cluster-randomly-reports-quot-Clock-Offset-Bad/td-p/31166" target="_blank" rel="noopener">https://community.cloudera.com/t5/Cloudera-Manager-Installation/Cloudera-5-4-x-cluster-randomly-reports-quot-Clock-Offset-Bad/td-p/31166</a></p><p>—over—</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; CDH集群总是提示时钟偏差,但是查看ntpd服务是正常工作的. &lt;/p&gt;
&lt;p&gt; OS Version:    CentOS Linux release 7.5.1804 (Core)&lt;/p&gt;
&lt;p&gt; CDH Version:    CDH 5.8.4&lt;/p&gt;
&lt;p&gt;于是
      
    
    </summary>
    
      <category term="CDH" scheme="http://yoursite.com/categories/CDH/"/>
    
    
      <category term="cloudera-scm-agent" scheme="http://yoursite.com/tags/cloudera-scm-agent/"/>
    
      <category term="ntp" scheme="http://yoursite.com/tags/ntp/"/>
    
  </entry>
  
  <entry>
    <title>PageRank算法介绍</title>
    <link href="http://yoursite.com/2018/07/25/PageRank%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2018/07/25/PageRank算法介绍/</id>
    <published>2018-07-25T14:50:16.000Z</published>
    <updated>2018-07-25T15:02:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>在PageRank发明之前，搜索引擎采用的还是最原始的关键字匹配技术，于是呢在搜索结果中经常会遇到「挂羊头卖狗肉」的垃圾网站，对这些网站，当时的Yahoo采用还是人工清理的方法。</p><p>这时候Google的两位创始人Page和Brin就在想，有没有一种算法，能够给出网页重要性的排序呢？这样就可以优先推荐重要网页，而让那些垃圾网页石沉大海了。Page和Brin发现，网页的超链接结构中就蕴含了重要程度的信息。由于一个网页的超链接指向的主要是与其内容相关的网页，那么我们不难想象，如果有许多网页都同时指向某一个网页，这个网页就一定非常重要。我们将互联网想象成一个流网络，网络的节点就是一个个网页，如果两个网页间存在超链接的关系，那么它们之间就存在一条有向的连边。想象存在一种货币，它们在这个流网络上随机地流动，在任意时刻，每个网页上都会有货币流入，也会有货币流出，当最终达到稳定时，将每个网页持有的货币存量，或者说「财富」的多寡由大到小排序，就得到了网页重要性的排序PageRank。</p><p>我们发现排在前面的主要是被较多引用的网页，当然有幸被重要网页引用的网页也会得到较大的PageRank值。当然我们还要考虑这样一种情况，如果遇到不引用任何其他网页的「铁公鸡」，或者网页A仅引用B，B仅引用C，C又仅引用A的「小团体」，货币只会流入不会流出，他们会积累大量的货币，但显然他们不一定是最重要的。为避免这样的情况发生，PageRank还使货币可以以概率e跳到系统中的任意其他节点。或者我们可以想象系统中存在一个「中央政府」，它在每一时刻都从各个网页节点的「财富」中征缴比例为e的「税金」，然后再平均分给每一个网页。</p><h3 id="链接："><a href="#链接：" class="headerlink" title="链接："></a>链接：</h3><p><a href="https://www.zhihu.com/question/19555545/answer/" target="_blank" rel="noopener">https://www.zhihu.com/question/19555545/answer/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h3&gt;&lt;p&gt;在PageRank发明之前，搜索引擎采用的还是最原始的关键字匹配技术，于是呢在搜索结果中经常会遇到「挂羊头卖狗肉」的垃圾网站，对这些网站，当
      
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="google" scheme="http://yoursite.com/tags/google/"/>
    
      <category term="pagerank" scheme="http://yoursite.com/tags/pagerank/"/>
    
  </entry>
  
  <entry>
    <title>Error found before invoking supervisord: dictionary update sequence element #100 has length 1; 2 is required</title>
    <link href="http://yoursite.com/2018/06/04/Error-found-before-invoking-supervisord-dictionary-update-sequence-element-100-has-length-1-2-is-required/"/>
    <id>http://yoursite.com/2018/06/04/Error-found-before-invoking-supervisord-dictionary-update-sequence-element-100-has-length-1-2-is-required/</id>
    <published>2018-06-04T09:36:07.000Z</published>
    <updated>2018-06-04T10:21:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>cloudera manager agent bug report——can’t start tasktracker</p><p>cloudera manager 4.8 + CDH4.4 + centos5、6agent log below when start TT by CM</p><hr><p>[10/Feb/2014 09:08:44 +0000] 105652 MainThread util ERROR Failed to parse environment variables: CDH_HCAT_HOME=/usr/lib/hcatalog<br>HADOOP_LOGFILE=hadoop-cmf-mapreduce1-TASKTRACKER-dn3.hadoop.com.log.out<br>TOMCAT_HOME=/usr/lib/bigtop-tomcat<br>HOSTNAME=dn3.hadoop.com<br>HADOOP_SECURITY_LOGGER=INFO,RFAS<br>CDH_SOLR_HOME=/usr/lib/solr<br>CDH_PIG_HOME=/usr/lib/pig<br>HADOOP_LOG_DIR=/var/log/hadoop-0.20-mapreduce<br>CLOUDERA_MYSQL_CONNECTOR_JAR=/usr/share/java/mysql-connector-java.jar<br>SHELL=/bin/bash<br>TERM=linux<br>HISTSIZE=1000<br>SSH_CLIENT=61.135.207.195 50583 22<br>CDH_HUE_PLUGINS_HOME=/usr/lib/hadoop<br>CDH_HIVE_HOME=/usr/lib/hive<br>QTDIR=/usr/lib64/qt-3.3<br>QTINC=/usr/lib64/qt-3.3/include<br>SSH_TTY=/dev/pts/2<br>CLOUDERA_ORACLE_CONNECTOR_JAR=/usr/share/java/oracle-connector-java.jar<br>HIVE_DEFAULT_XML=/etc/hive/conf.dist/hive-default.xml<br>CDH_VERSION=4<br>MGMT_HOME=/usr/share/cmf<br>CMF_CONF_DIR=/etc/cloudera-scm-agent<br>USER=root<br>JSVC_HOME=/usr/libexec/bigtop-utils<br>LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:<em>.tar=01;31:</em>.tgz=01;31:<em>.arj=01;31:</em>.taz=01;31:<em>.lzh=01;31:</em>.lzma=01;31:<em>.tlz=01;31:</em>.txz=01;31:<em>.zip=01;31:</em>.z=01;31:<em>.Z=01;31:</em>.dz=01;31:<em>.gz=01;31:</em>.lz=01;31:<em>.xz=01;31:</em>.bz2=01;31:<em>.tbz=01;31:</em>.tbz2=01;31:<em>.bz=01;31:</em>.tz=01;31:<em>.deb=01;31:</em>.rpm=01;31:<em>.jar=01;31:</em>.rar=01;31:<em>.ace=01;31:</em>.zoo=01;31:<em>.cpio=01;31:</em>.7z=01;31:<em>.rz=01;31:</em>.jpg=01;35:<em>.jpeg=01;35:</em>.gif=01;35:<em>.bmp=01;35:</em>.pbm=01;35:<em>.pgm=01;35:</em>.ppm=01;35:<em>.tga=01;35:</em>.xbm=01;35:<em>.xpm=01;35:</em>.tif=01;35:<em>.tiff=01;35:</em>.png=01;35:<em>.svg=01;35:</em>.svgz=01;35:<em>.mng=01;35:</em>.pcx=01;35:<em>.mov=01;35:</em>.mpg=01;35:<em>.mpeg=01;35:</em>.m2v=01;35:<em>.mkv=01;35:</em>.ogm=01;35:<em>.mp4=01;35:</em>.m4v=01;35:<em>.mp4v=01;35:</em>.vob=01;35:<em>.qt=01;35:</em>.nuv=01;35:<em>.wmv=01;35:</em>.asf=01;35:<em>.rm=01;35:</em>.rmvb=01;35:<em>.flc=01;35:</em>.avi=01;35:<em>.fli=01;35:</em>.flv=01;35:<em>.gl=01;35:</em>.dl=01;35:<em>.xcf=01;35:</em>.xwd=01;35:<em>.yuv=01;35:</em>.cgm=01;35:<em>.emf=01;35:</em>.axv=01;35:<em>.anx=01;35:</em>.ogv=01;35:<em>.ogx=01;35:</em>.aac=01;36:<em>.au=01;36:</em>.flac=01;36:<em>.mid=01;36:</em>.midi=01;36:<em>.mka=01;36:</em>.mp3=01;36:<em>.mpc=01;36:</em>.ogg=01;36:<em>.ra=01;36:</em>.wav=01;36:<em>.axa=01;36:</em>.oga=01;36:<em>.spx=01;36:</em>.xspf=01;36:<br>SSH_AUTH_SOCK=/tmp/ssh-REFP104132/agent.104132<br>CDH_IMPALA_HOME=/usr/lib/impala<br>CDH_HTTPFS_HOME=/usr/lib/hadoop-httpfs<br>CDH_MR2_HOME=/usr/lib/hadoop-mapreduce<br>CDH_MR1_HOME=/usr/lib/hadoop-0.20-mapreduce<br>CDH_HUE_HOME=/usr/share/hue<br>CM_STATUS_CODES=STATUS_NONE HDFS_DFS_DIR_NOT_EMPTY JOBTRACKER_IN_STANDBY_MODE<br>MAIL=/var/spool/mail/root<br>PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/kerberos/bin<br>CONF_DIR=/var/run/cloudera-scm-agent/process/364-mapreduce-TASKTRACKER<br>PWD=/var/log/cloudera-scm-agent<br>LANG=zh_CN.UTF-8<br>KDE_IS_PRELINKED=1<br>CDH_HADOOP_HOME=/usr/lib/hadoop<br>MODULEPATH=/usr/share/Modules/modulefiles:/etc/modulefiles<br>LOADEDMODULES=<br>KDEDIRS=/usr<br>HADOOP_AUDIT_LOGGER=INFO,RFAAUDIT<br>CDH_SQOOP2_HOME=/usr/lib/sqoop2<br>HISTCONTROL=ignoredups<br>KRB5CCNAME=/tmp/krb5cc_cm_agent<br>CDH_HDFS_HOME=/usr/lib/hadoop-hdfs<br>CDH_HADOOP_BIN=/usr/bin/hadoop<br>SSH_ASKPASS=/usr/libexec/openssh/gnome-ssh-askpass<br>SHLVL=3<br>HOME=/root<br>CDH_OOZIE_HOME=/usr/lib/oozie<br>CDH_HBASE_INDEXER_HOME=/usr/lib/hbase-solr<br>CDH_FLUME_HOME=/usr/lib/flume-ng<br>LOGNAME=root<br>QTLIB=/usr/lib64/qt-3.3/lib<br>CVS_RSH=ssh<br>SSH_CONNECTION=61.135.207.195 50583 223.202.52.31 22<br>CDH_HBASE_HOME=/usr/lib/hbase<br>CDH_ZOOKEEPER_HOME=/usr/lib/zookeeper<br>MODULESHOME=/usr/share/Modules<br>CDH_YARN_HOME=/usr/lib/hadoop-yarn<br>LESSOPEN=|/usr/bin/lesspipe.sh %s<br>HADOOP_TASKTRACKER_OPTS=-Xms1073741824 -Xmx1073741824 -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:-CMSConcurrentMTEnabled -XX:CMSInitiatingOccupancyFraction=70 -XX:+CMSParallelRemarkEnabled -Dhadoop.event.appender=,EventCatcher -Dhadoop.security.logger=INFO,RFAS<br>HADOOP_ROOT_LOGGER=INFO,RFA<br>CMF_PACKAGE_DIR=/usr/lib64/cmf/service<br>CLOUDERA_POSTGRESQL_JDBC_JAR=/usr/share/cmf/lib/postgresql-9.0-801.jdbc4.jar<br>G_BROKEN_FILENAMES=1<br>HISTTIMEFORMAT=%F %T<br>module=() { eval `/usr/bin/modulecmd bash $*`<br>}<br>_=/bin/env<br>Traceback (most recent call last):<br>File “/usr/lib64/cmf/agent/src/cmf/util.py”, line 286, in source<br>return dict((line.split(“=”, 1) for line in data.splitlines()))<br>ValueError: dictionary update sequence element #71 has length 1; 2 is required<br>[10/Feb/2014 09:08:44 +0000] 105652 MainThread agent ERROR Failed to activate {u’status_links’: {u’status’: u’<a href="http://dn3.hadoop.com:50060/&#39;}" target="_blank" rel="noopener">http://dn3.hadoop.com:50060/&#39;}</a>, u’name’: u’mapreduce-TASKTRACKER’, u’config_generation’: 5, u’configuration_data’: ‘PK</p><p>…(省略)</p><p>u’refresh_files’: [], u’user’: u’mapred’, u’auto_restart’: True, u’run_generation’: 1, u’parcels’: {}, u’environment’: {u’HADOOP_AUDIT_LOGGER’: u’INFO,RFAAUDIT’, u’HADOOP_TASKTRACKER_OPTS’: u’-Xms1073741824 -Xmx1073741824 -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:-CMSConcurrentMTEnabled -XX:CMSInitiatingOccupancyFraction=70 -XX:+CMSParallelRemarkEnabled -Dhadoop.event.appender=,EventCatcher -Dhadoop.security.logger=INFO,RFAS’, u’HADOOP_SECURITY_LOGGER’: u’INFO,RFAS’, u’HADOOP_LOG_DIR’: u’/var/log/hadoop-0.20-mapreduce’, u’HADOOP_ROOT_LOGGER’: u’INFO,RFA’, u’HADOOP_LOGFILE’: u’hadoop-cmf-mapreduce1-TASKTRACKER-dn3.hadoop.com.log.out’, u’CDH_VERSION’: u’4’}, u’optional_tags’: [u’cdh-plugin’, u’mapreduce-plugin’], u’running’: True, u’program’: u’mapreduce/mapreduce.sh’, u’required_tags’: [u’cdh’], u’arguments’: [u’tasktracker’], u’special_file_info’: [{u’permissions’: 420, u’deploy_dir’: u’$CDH_MR1_HOME/conf’, u’group’: u’root’, u’name’: u’taskcontroller.cfg’, u’user’: u’root’}], u’group’: u’hadoop’, u’id’: 364, u’resources’: [{u’file’: None, u’tcp_listen’: None, u’dynamic’: True, u’io’: None, u’memory’: None, u’directory’: None, u’cpu’: {u’shares’: 1024}}, {u’file’: None, u’tcp_listen’: None, u’dynamic’: True, u’io’: {u’weight’: 500}, u’memory’: None, u’directory’: None, u’cpu’: None}, {u’file’: None, u’tcp_listen’: None, u’dynamic’: False, u’io’: None, u’memory’: {u’hard_limit’: -1, u’soft_limit’: -1}, u’directory’: None, u’cpu’: None}, {u’file’: None, u’tcp_listen’: None, u’dynamic’: False, u’io’: None, u’memory’: None, u’directory’: {u’path’: u’/var/log/hadoop-0.20-mapreduce’, u’bytes_free_warning_threshhold_bytes’: 0, u’group’: u’hadoop’, u’user’: u’root’, u’mode’: 509}, u’cpu’: None}, {u’file’: None, u’tcp_listen’: None, u’dynamic’: False, u’io’: None, u’memory’: None, u’directory’: {u’path’: u’/var/lib/hadoop-mapreduce’, u’bytes_free_warning_threshhold_bytes’: 0, u’group’: u’hadoop’, u’user’: u’mapred’, u’mode’: 493}, u’cpu’: None}, {u’file’: None, u’tcp_listen’: None, u’dynamic’: False, u’io’: None, u’memory’: None, u’directory’: {u’path’: u’/data2/mapred/local’, u’bytes_free_warning_threshhold_bytes’: 0, u’group’: u’hadoop’, u’user’: u’mapred’, u’mode’: 493}, u’cpu’: None}, {u’file’: None, u’tcp_listen’: None, u’dynamic’: False, u’io’: None, u’memory’: None, u’directory’: {u’path’: u’/data3/mapred/local’, u’bytes_free_warning_threshhold_bytes’: 0, u’group’: u’hadoop’, u’user’: u’mapred’, u’mode’: 493}, u’cpu’: None}, {u’file’: None, u’tcp_listen’: None, u’dynamic’: False, u’io’: None, u’memory’: None, u’directory’: {u’path’: u’/data4/mapred/local’, u’bytes_free_warning_threshhold_bytes’: 0, u’group’: u’hadoop’, u’user’: u’mapred’, u’mode’: 493}, u’cpu’: None}, {u’file’: None, u’tcp_listen’: None, u’dynamic’: False, u’io’: None, u’memory’: None, u’directory’: {u’path’: u’/data5/mapred/local’, u’bytes_free_warning_threshhold_bytes’: 0, u’group’: u’hadoop’, u’user’: u’mapred’, u’mode’: 493}, u’cpu’: None}, {u’file’: None, u’tcp_listen’: None, u’dynamic’: False, u’io’: None, u’memory’: None, u’directory’: {u’path’: u’/data6/mapred/local’, u’bytes_free_warning_threshhold_bytes’: 0, u’group’: u’hadoop’, u’user’: u’mapred’, u’mode’: 493}, u’cpu’: None}, {u’file’: None, u’tcp_listen’: {u’bind_address’: u’172.16.11.187’, u’port’: 50060}, u’dynamic’: False, u’io’: None, u’memory’: None, u’directory’: None, u’cpu’: None}], u’one_off’: False}<br>Traceback (most recent call last):<br>File “/usr/lib64/cmf/agent/src/cmf/agent.py”, line 1004, in handle_heartbeat_response<br>new_process.activate()<br>File “/usr/lib64/cmf/agent/src/cmf/agent.py”, line 1899, in activate<br>self.write_process_conf()<br>File “/usr/lib64/cmf/agent/src/cmf/agent.py”, line 1990, in write_process_conf<br>“source_parcel_environment”, env))<br>File “/usr/lib64/cmf/agent/src/cmf/util.py”, line 289, in source<br>raise e<br><strong><em>ValueError: dictionary update sequence element #71 has length 1; 2 is required</em></strong></p><p>==========================</p><p>when i run linux command ‘env’ ,i saw some line has no symbol ‘=’：</p><p>#env</p><p>…<br>module=() { eval `/usr/bin/modulecmd bash $*`<br>}        &lt;&lt;&lt;== look here<br>_=/bin/env</p><p>according to error log, i open agent file “/usr/lib64/cmf/agent/src/cmf/util.py “, line 271-289:</p><p>271 def source(path, command, caller_env):<br>272 “””<br>273 Source a shell script in a subprocess and extract its environment and return<br>274 it as a dict. For our specific purposes we need to support executing a command<br>275 after sourcing the script to correctly populate the environment.<br>276 “””<br>277 for k, v in caller_env.iteritems():<br>278 if v is None:<br>279 LOG.warn(“None environment value: %s=%s” % (k, v,))<br>280<br>281 pipe = subprocess.Popen([‘/bin/bash’, ‘-c’, “. %s; %s; env | grep =” % (path, command)],<br>282 stdout=subprocess.PIPE, env=caller_env)<br>283 data = pipe.communicate()[0]<br>284<br>285 try:<br>286     return dict((line.split(“=”, 1) for line in data.splitlines()))    &lt;&lt;&lt;&lt;&lt;=== look here<br>287 except Exception, e:<br>288     LOG.exception(“Failed to parse environment variables: “ + data)<br>289     raise e</p><p>line 286 split line by “=”, then add to dict. when the line not contans ‘=’, error would throws.</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>fix it:</p><hr><p>change<br>281 pipe = subprocess.Popen([‘/bin/bash’, ‘-c’, “. %s; %s; env” % (path, command)],</p><p>to<br>281 pipe = subprocess.Popen([‘/bin/bash’, ‘-c’, “. %s; %s; env | grep =” % (path, command)],</p><p>then:<br>/etc/init.d/cloudera-scm-agent restart<br>open cloudera manager, start TT</p><p>The most likely reason this is occurring is because the Cloudera Manager agent was started by invoking the init.d script rather than using the service command</p><p>(BAD)</p><p>/etc/init.d/cloudera-scm-agent start<br>(GOOD)<br>service cloudera-scm-agent start</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://community.cloudera.com/t5/Cloudera-Manager-Installation/Can-t-start-the-tasktracker/td-p/20596" target="_blank" rel="noopener">http://community.cloudera.com/t5/Cloudera-Manager-Installation/Can-t-start-the-tasktracker/td-p/20596</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h1&gt;&lt;p&gt;cloudera manager agent bug report——can’t start tasktracker&lt;/p&gt;
&lt;p&gt;clou
      
    
    </summary>
    
      <category term="CDH" scheme="http://yoursite.com/categories/CDH/"/>
    
    
      <category term="nodemanager" scheme="http://yoursite.com/tags/nodemanager/"/>
    
      <category term="cdh" scheme="http://yoursite.com/tags/cdh/"/>
    
  </entry>
  
  <entry>
    <title>hive UDF整理</title>
    <link href="http://yoursite.com/2018/05/25/hive-UDF%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2018/05/25/hive-UDF整理/</id>
    <published>2018-05-25T01:10:16.000Z</published>
    <updated>2018-05-25T01:44:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="转-Hive-UDF整理"><a href="#转-Hive-UDF整理" class="headerlink" title="[转]Hive UDF整理"></a>[转]Hive UDF整理</h1><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><h3 id="字符串长度函数：length"><a href="#字符串长度函数：length" class="headerlink" title="##字符串长度函数：length"></a>##字符串长度函数：length</h3><pre><code>语法: length(string A)返回值: int说明：返回字符串A的长度举例：hive&gt; select length(‘abcedfg’) from dual;7</code></pre><h3 id="字符串反转函数：reverse"><a href="#字符串反转函数：reverse" class="headerlink" title="##字符串反转函数：reverse"></a>##字符串反转函数：reverse</h3><pre><code>语法: reverse(string A)返回值: string说明：返回字符串A的反转结果举例：hive&gt; select reverse(‘abcedfg’) from dual;gfdecba</code></pre><h3 id="字符串连接函数：concat"><a href="#字符串连接函数：concat" class="headerlink" title="##字符串连接函数：concat"></a>##字符串连接函数：concat</h3><pre><code>语法: concat(string A, string B…)返回值: string说明：返回输入字符串连接后的结果，支持任意个输入字符串举例：hive&gt; select concat(‘abc’,&apos;def’,&apos;gh’) from dual;abcdefgh</code></pre><h3 id="带分隔符字符串连接函数：concat-ws"><a href="#带分隔符字符串连接函数：concat-ws" class="headerlink" title="##带分隔符字符串连接函数：concat_ws"></a>##带分隔符字符串连接函数：concat_ws</h3><pre><code>语法: concat_ws(string SEP, string A, string B…)返回值: string说明：返回输入字符串连接后的结果，SEP表示各个字符串间的分隔符举例：hive&gt; select concat_ws(‘,’,&apos;abc’,&apos;def’,&apos;gh’) from dual;abc,def,gh</code></pre><h3 id="字符串截取函数：substr-substring"><a href="#字符串截取函数：substr-substring" class="headerlink" title="##字符串截取函数：substr,substring"></a>##字符串截取函数：substr,substring</h3><pre><code>语法: substr(string A, int start),substring(string A, int start)返回值: string说明：返回字符串A从start位置到结尾的字符串举例：hive&gt; select substr(‘abcde’,3) from dual;cdehive&gt; select substring(‘abcde’,3) from dual;cdehive&gt;  select substr(‘abcde’,-1) from dual;  （和ORACLE相同）e</code></pre><h3 id="字符串截取函数：substr-substring-1"><a href="#字符串截取函数：substr-substring-1" class="headerlink" title="##字符串截取函数：substr,substring"></a>##字符串截取函数：substr,substring</h3><pre><code>语法: substr(string A, int start, int len),substring(string A, int start, int len)返回值: string说明：返回字符串A从start位置开始，长度为len的字符串举例：hive&gt; select substr(‘abcde’,3,2) from dual;cdhive&gt; select substring(‘abcde’,3,2) from dual;cdhive&gt;select substring(‘abcde’,-2,2) from dual;de</code></pre><h3 id="字符串转大写函数：upper-ucase"><a href="#字符串转大写函数：upper-ucase" class="headerlink" title="##字符串转大写函数：upper,ucase"></a>##字符串转大写函数：upper,ucase</h3><pre><code>语法: upper(string A) ucase(string A)返回值: string说明：返回字符串A的大写格式举例：hive&gt; select upper(‘abSEd’) from dual;ABSEDhive&gt; select ucase(‘abSEd’) from dual;ABSED</code></pre><h3 id="字符串转小写函数：lower-lcase"><a href="#字符串转小写函数：lower-lcase" class="headerlink" title="##字符串转小写函数：lower,lcase"></a>##字符串转小写函数：lower,lcase</h3><pre><code>语法: lower(string A) lcase(string A)返回值: string说明：返回字符串A的小写格式举例：hive&gt; select lower(‘abSEd’) from dual;absedhive&gt; select lcase(‘abSEd’) from dual;absed</code></pre><h3 id="去空格函数：trim"><a href="#去空格函数：trim" class="headerlink" title="##去空格函数：trim"></a>##去空格函数：trim</h3><pre><code>语法: trim(string A)返回值: string说明：去除字符串两边的空格举例：hive&gt; select trim(‘ abc ‘) from dual;abc</code></pre><h3 id="左边去空格函数：ltrim"><a href="#左边去空格函数：ltrim" class="headerlink" title="##左边去空格函数：ltrim"></a>##左边去空格函数：ltrim</h3><pre><code>语法: ltrim(string A)返回值: string说明：去除字符串左边的空格举例：hive&gt; select ltrim(‘ abc ‘) from dual;abc</code></pre><h3 id="右边去空格函数：rtrim"><a href="#右边去空格函数：rtrim" class="headerlink" title="##右边去空格函数：rtrim"></a>##右边去空格函数：rtrim</h3><pre><code>语法: rtrim(string A)返回值: string说明：去除字符串右边的空格举例：hive&gt; select rtrim(‘ abc ‘) from dual;abc</code></pre><h3 id="正则表达式替换函数：regexp-replace"><a href="#正则表达式替换函数：regexp-replace" class="headerlink" title="##正则表达式替换函数：regexp_replace"></a>##正则表达式替换函数：regexp_replace</h3><pre><code>语法: regexp_replace(string A, string B, string C)返回值: string说明：将字符串A中的符合java正则表达式B的部分替换为C。注意，在有些情况下要使用转义字符举例：hive&gt; select regexp_replace(‘foobar’, ‘oo|ar’, ”) from dual;fb</code></pre><h3 id="正则表达式解析函数：regexp-extract"><a href="#正则表达式解析函数：regexp-extract" class="headerlink" title="##正则表达式解析函数：regexp_extract"></a>##正则表达式解析函数：regexp_extract</h3><pre><code>语法: regexp_extract(string subject, string pattern, int index)返回值: string说明：将字符串subject按照pattern正则表达式的规则拆分，返回index指定的字符。注意，在有些情况下要使用转义字符举例：hive&gt; select regexp_extract(‘foothebar’, ‘foo(.*?)(bar)’, 1) from dual;thehive&gt; select regexp_extract(‘foothebar’, ‘foo(.*?)(bar)’, 2) from dual;barhive&gt; select regexp_extract(‘foothebar’, ‘foo(.*?)(bar)’, 0) from dual;foothebar</code></pre><h3 id="URL解析函数：parse-url"><a href="#URL解析函数：parse-url" class="headerlink" title="##URL解析函数：parse_url"></a>##URL解析函数：parse_url</h3><pre><code>语法: parse_url(string urlString, string partToExtract [, string keyToExtract])返回值: string说明：返回URL中指定的部分。partToExtract的有效值为：HOST, PATH, QUERY, REF, PROTOCOL, AUTHORITY, FILE, and USERINFO.举例：hive&gt; select parse_url(‘http://facebook.com/path1/p.php?k1=v1&amp;k2=v2#Ref1′, ‘HOST’) from dual;facebook.comhive&gt; select parse_url(‘http://facebook.com/path1/p.php?k1=v1&amp;k2=v2#Ref1′, ‘QUERY’, ‘k1′) from dual;v1</code></pre><h3 id="json解析函数：get-json-object"><a href="#json解析函数：get-json-object" class="headerlink" title="##json解析函数：get_json_object"></a>##json解析函数：get_json_object</h3><pre><code>语法: get_json_object(string json_string, string path)返回值: string说明：解析json的字符串json_string,返回path指定的内容。如果输入的json字符串无效，那么返回NULL。举例：hive&gt; select  get_json_object(&apos;{&quot;store&quot;:{&quot;fruit&quot;:[{&quot;weight&quot;:8,&quot;type&quot;:&quot;apple&quot;},{&quot;weight&quot;:9,&quot;type&quot;:&quot;pear&quot;}],&quot;bicycle&quot;:{&quot;price&quot;:19.95,&quot;color&quot;:&quot;red&quot;}},&quot;email&quot;:&quot;amy@only_for_json_udf_test.net&quot;,&quot;owner&quot;:&quot;amy&quot;}&apos;,&apos;$.owner&apos;) from dual;amy</code></pre><h3 id="空格字符串函数：space"><a href="#空格字符串函数：space" class="headerlink" title="##空格字符串函数：space"></a>##空格字符串函数：space</h3><pre><code>语法: space(int n)返回值: string说明：返回长度为n的字符串举例：hive&gt; select space(10) from dual;hive&gt; select length(space(10)) from dual;10</code></pre><h3 id="重复字符串函数：repeat"><a href="#重复字符串函数：repeat" class="headerlink" title="##重复字符串函数：repeat"></a>##重复字符串函数：repeat</h3><pre><code>语法: repeat(string str, int n)返回值: string说明：返回重复n次后的str字符串举例：hive&gt; select repeat(‘abc’,5) from dual;abcabcabcabcabc</code></pre><h3 id="首字符ascii函数：ascii"><a href="#首字符ascii函数：ascii" class="headerlink" title="##首字符ascii函数：ascii"></a>##首字符ascii函数：ascii</h3><pre><code>语法: ascii(string str)返回值: int说明：返回字符串str第一个字符的ascii码举例：hive&gt; select ascii(‘abcde’) from dual;97</code></pre><h3 id="左补足函数：lpad"><a href="#左补足函数：lpad" class="headerlink" title="##左补足函数：lpad"></a>##左补足函数：lpad</h3><pre><code>语法: lpad(string str, int len, string pad)返回值: string说明：将str进行用pad进行左补足到len位举例：hive&gt; select lpad(‘abc’,10,’td’) from dual;tdtdtdtabc与GP，ORACLE不同，pad 不能默认</code></pre><h3 id="右补足函数：rpad"><a href="#右补足函数：rpad" class="headerlink" title="##右补足函数：rpad"></a>##右补足函数：rpad</h3><pre><code>语法: rpad(string str, int len, string pad)返回值: string说明：将str进行用pad进行右补足到len位举例：hive&gt; select rpad(‘abc’,10,’td’) from dual;abctdtdtdt</code></pre><h3 id="分割字符串函数-split"><a href="#分割字符串函数-split" class="headerlink" title="##分割字符串函数: split"></a>##分割字符串函数: split</h3><pre><code>语法:  split(string str, string pat)返回值:  array说明: 按照pat字符串分割str，会返回分割后的字符串数组举例：hive&gt; select split(‘abtcdtef’,&apos;t’) from dual;[&quot;ab&quot;,&quot;cd&quot;,&quot;ef&quot;]</code></pre><h3 id="集合查找函数-find-in-set"><a href="#集合查找函数-find-in-set" class="headerlink" title="##集合查找函数: find_in_set"></a>##集合查找函数: find_in_set</h3><pre><code>语法: find_in_set(string str, string strList)返回值: int说明: 返回str在strlist第一次出现的位置，strlist是用逗号分割的字符串。如果没有找该str字符，则返回0（只能是逗号分隔，不然返回0）举例：hive&gt; select find_in_set(‘ab’,&apos;ef,ab,de’) from dual;2hive&gt; select find_in_set(‘at’,&apos;ef,ab,de’) from dual;0</code></pre><p><em>原文地址</em>：</p><p><a href="https://my.oschina.net/repine/blog/193867" target="_blank" rel="noopener">https://my.oschina.net/repine/blog/193867</a></p><p><a href="http://www.oratea.net/?p=951" target="_blank" rel="noopener">http://www.oratea.net/?p=951</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;转-Hive-UDF整理&quot;&gt;&lt;a href=&quot;#转-Hive-UDF整理&quot; class=&quot;headerlink&quot; title=&quot;[转]Hive UDF整理&quot;&gt;&lt;/a&gt;[转]Hive UDF整理&lt;/h1&gt;&lt;h2 id=&quot;字符串函数&quot;&gt;&lt;a href=&quot;#字符串函数&quot;
      
    
    </summary>
    
      <category term="hive" scheme="http://yoursite.com/categories/hive/"/>
    
    
      <category term="hive" scheme="http://yoursite.com/tags/hive/"/>
    
      <category term="udf" scheme="http://yoursite.com/tags/udf/"/>
    
  </entry>
  
  <entry>
    <title>Python正则表达式匹配反斜杠</title>
    <link href="http://yoursite.com/2018/05/19/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D%E5%8F%8D%E6%96%9C%E6%9D%A0/"/>
    <id>http://yoursite.com/2018/05/19/Python正则表达式匹配反斜杠/</id>
    <published>2018-05-18T16:44:29.000Z</published>
    <updated>2018-05-18T16:49:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python正则式的过程中，有一个问题一直困扰我，如何去匹配一个反斜杠（即”\”）？</p><h1 id="一、普通字符串转义"><a href="#一、普通字符串转义" class="headerlink" title="一、普通字符串转义"></a>一、普通字符串转义</h1><p>反斜杠，在Python中比较特殊，就是它可以用来构成一些特殊字符，比如“\n”表示换行，“\t”表示制表符。下面是使用“\n”的一行代码：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">'Hello\World\nPython'</span></span><br></pre></td></tr></table></figure><p>结果为：<br>“Hello\World<br>Python“</p><p>可以看到其中的“\n”已转义为换行符，而“\W”没有发生转义，原因是“\W”在“字符串转义”中并不对应着特殊字符，没有特殊含义。</p><p>如果现在要求变了，要求不对“\n”转义为换行，而是原封不动输出为“Hello\World\nPython”，该怎么办呢？</p><p>1）可以这样写“Hello\World\\nPython”，这样输出的时候，“字符串转义”会把“\\”转义为“\”；</p><p>2）也可使用另一种方法：原始字符串；原始字符串（即r’…’）：字符串中所有字符都直接按照字面意思来使用，不转义特殊字符。</p><p>下面是使用原始字符串的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">r'Hello\World\nPython'</span></span><br></pre></td></tr></table></figure><p>结果为：<br>“Hello\World\nPython”<br>可以清楚看到，在使用原始字符串之后，“\n”未被转义为换行符，而是直接被输出了。</p><h1 id="二、正则转义"><a href="#二、正则转义" class="headerlink" title="二、正则转义"></a>二、正则转义</h1><p>好了，上面讲的只是“字符串转义”。同理，在正则表达式中也存在转义，我们姑且先称其为“正则转义”，其与“字符串转义”完全不同，比如“\d”代表数字，“\s”代表空白符。下面我们先编写开头的例子，然后再分析。</p><p>提取“3\8”反斜杠之前的数字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python  </span></span><br><span class="line"><span class="comment">#coding=utf-8  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> re  </span><br><span class="line">  </span><br><span class="line">string = <span class="string">'3\8'</span>  </span><br><span class="line">m = re.search(<span class="string">'(\d+)\\\\'</span>, string)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:  </span><br><span class="line">    <span class="keyword">print</span> m.group(<span class="number">1</span>)  <span class="comment"># 结果为：3  </span></span><br><span class="line">  </span><br><span class="line">n = re.search(<span class="string">r'(\d+)\\'</span>, string)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> n <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:  </span><br><span class="line">    <span class="keyword">print</span> n.group(<span class="number">1</span>)  <span class="comment"># 结果为：3</span></span><br></pre></td></tr></table></figure><p>正则表达式字符串需要经过两次转义，这两次分别是上面的“字符串转义”和“正则转义”，个人认为“字符串转义”一定先于“正则转义”。</p><p>1）’\\‘的过程：<br>先进行“字符串转义”，前两个反斜杠和后两个反斜杠分别被转义成了一个反斜杠；即“\|\”被转成了“|\”（“|”为方便看清，请自动忽略）。“字符串转义”后马上进行“正则转义”，“\”被转义为了“\”，表示该正则式需要匹配一个反斜杠。</p><p>2）r’\‘的过程：<br>由于原始字符串中所有字符直接按照字面意思来使用，不转义特殊字符，故不做“字符串转义”，直接进入第二步“正则转义”，在正则转义中“\”被转义为了“\”，表示该正则式需要匹配一个反斜杠。</p><h1 id="三、结论"><a href="#三、结论" class="headerlink" title="三、结论"></a>三、结论</h1><p>也就是说原始字符串（即r’…’）与“正则转义”毫无关系，原始字符串仅在“字符串转义”中起作用，使字符串免去一次转义。</p><p>也许有哥们会问，为什么“\d+\\”中的“\d+”即使没用原始字符串，也没出现什么问题。那是因为在做“字符串转义”时，“\d”并不对应特殊字符，所以顺利的留到了“正则转义”时再处理，在“正则转义”中其表示数字。</p><p>参考自《Python核心编程》第二版，如有不恰当的地方，还望包容和指出，感谢。</p><p>转自：<a href="https://blog.csdn.net/jinixin/article/details/56705284" target="_blank" rel="noopener">https://blog.csdn.net/jinixin/article/details/56705284</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python正则式的过程中，有一个问题一直困扰我，如何去匹配一个反斜杠（即”\”）？&lt;/p&gt;
&lt;h1 id=&quot;一、普通字符串转义&quot;&gt;&lt;a href=&quot;#一、普通字符串转义&quot; class=&quot;headerlink&quot; title=&quot;一、普通字符串转义&quot;&gt;&lt;/a&gt;一、普通字符串转义
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="regx" scheme="http://yoursite.com/tags/regx/"/>
    
      <category term="escape" scheme="http://yoursite.com/tags/escape/"/>
    
  </entry>
  
  <entry>
    <title>Impala优化基本方案</title>
    <link href="http://yoursite.com/2018/05/17/Impala%E4%BC%98%E5%8C%96%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2018/05/17/Impala优化基本方案/</id>
    <published>2018-05-16T16:30:12.000Z</published>
    <updated>2018-05-16T16:54:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h1><p>本文源自cloudera官网上的Impala文档，原名为《Impala Performance Guidelines and Best Practices》。主要介绍了为了提升impala性能应该考虑的一些事情，这些条目算是对于性能提升最基本的约束了，条目分别如下：</p><ol><li>选择合适的文件存储格式，既然使用impala，无非就是为了一个目的：性能好/资源消耗少，Impala为了做到通用性，也就是为了更好的hive无缝连接，支持了大部分Hive支持的文件格式，例如Text、Avro、RCFile、Parquet等（不支持ORC），但是为了实现更快的ad-hoc查询（基本上都是OLAP查询，查询部分列，聚合，分析），我们基本上都会选择使用Parquet格式作为数据文件存储格式，即使你的数据导入到hive中存储的使用的是其它格式（甚至通过自定义serde解析，例如Json），仍然建议你新建一个Parquet格式的表，然后进行一次数据的转换。因此这个条目可以看做是：请选用Parquet作为文件存储格式！</li><li>选择合适的Partition粒度，分区的个数通常是根据业务数据来的，通常时间分区（例如日期/月份）是少不了的，例如对于一个支持多终端的应用，可能在时间分区下面再加一层终端类型的分区，设置对于每一个终端的不同操作在进行一层分区，根据唯物辩证法，凡事都需要保持一个度，那么就从两个极端的情况下来分析分区的粒度如何确定：1：分区过少:，整个表不使用分区，或者只有一个日期的分区，这样会导致频繁的查询某一个终端的数据不得不扫描整天的数据甚至整个表的数据，这是一种浪费；2、分区过多，对于每一个要统计的维度都创建一个分区，这样对于任何一个维度=’xxx’的查询都只需要扫描精确需要的数据，但是这样会导致大量的数据目录，进而导致大量的文件需要扫描，这对于查询优化器是一个灾难。因此最终的建议是：根据查询需求确定分区的粒度，根据每一个分区的成员个数预估总的分区数，保证一个表的分区数不超过30000（经验之谈？），避免过小的分区。</li><li>尽量分区的成员的长度，目前分区字段可以支持数值类型和字符串，但是这里推荐尽可能的使用合适的整数（一般用0-256就可以保存一个分区成员的映射了，否则分区会很多）而非原始的字符串，可以在外面建立字符串到整数的映射以保存原始信息，这个约束的主要原因是每一个分区会占用一个目录，每一个目录名又会在NameNode中占用一定的内存，所以不光光是对于Impala而言，对于使用Hadoop的用户而言，尽量减小文件目录的长度。</li><li>选择合适的Parquet Block大小，在条目1中已经明确，要使用Impala获得较快的查询性能，那么就老老实实的使用Parquet作为存储格式，而每一个Parquet的Block大小又有什么影响呢，这里暂且把Block的大小理解成一个Parquet分区的大小，在存储上表现为文件大小，如果文件过大，那么会导致这个文件只会一个Impalad进程处理，这样大大降低了Impala的并行处理能力；而如果文件过小则会导致大量的小文件，在带来并发执行的同时也会带来大量的随机I/O的影响，因此需要对于特定的数据进行不同的parquet Block大小测试以寻求最适合该数据集的Block大小。</li><li>收集表和分区的统计信息，在执行完数据导入之后，建议使用 COMPUTE STATS语句收集表的统计信息，当然也可以只收集某一个分区的统计信息。</li><li>减少返回结果大小，如果需要统计聚合，直接在SQL中完成，尽可能的在where中执行过滤而不要查出来之后在应用端做过滤，对于查询结果尽可能使用LIMIT限制返回结果集大小；避免大量的结果展示在终端，可以考虑通过INSERT xxx的方式把结果输出到文件，或者通过impala-shell参数将结果重定向。</li><li>对于执行性能较差的查询使用EXPLAIN分析原因。</li><li>最后，查询操作系统配置、查看系统使用负载，可以使用Query Profile工具来探测。</li></ol><p>上面的这些条目是最基本的应对性能调优的方案，主要包括：使用Parquet格式存储数据、分区粒度要确定好，保证整个表的分区数不要太多（目录不要太多），每一个分区下不要存在过多的小文件（选择合适的Parquet文件大小），收集统计信息使得查询优化器能够选择更好的查询方案，最后要学会使用EXPLAIN和Profile功能分析性能问题所在。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">[hadoop15:21000] &gt;  explain <span class="string">"此处sql省略"</span>，原SQL执行时间7'</span><br><span class="line">+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|<span class="string"> Explain String                                                                                                                                                                                                                                                                                         </span>|</span><br><span class="line">+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|<span class="string"> Estimated Per-Host Requirements: Memory=432.00MB VCores=3                                                                                                                                                                                                                                              </span>|</span><br><span class="line">|<span class="string"> WARNING: The following tables are missing relevant table and/or column statistics.                                                                                                                                                                                                                     </span>|</span><br><span class="line">|<span class="string"> db1.tab1, db2.tab2                                                                                                                                                                                                                                                              </span>|</span><br><span class="line">|<span class="string">                                                                                                                                                                                                                                                                                                        </span>|</span><br><span class="line">|<span class="string"> 26:EXCHANGE [UNPARTITIONED]                                                                                                                                                                                                                                                                            </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">                                                                                                                                                                                                                                                                                                      </span>|</span><br><span class="line">|<span class="string"> 14:HASH JOIN [LEFT OUTER JOIN, PARTITIONED]                                                                                                                                                                                                                                                            </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">                                                                                                                                                                                                               </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">                                                                                                                                                                                                                                                                                                      </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">--25:EXCHANGE [HASH(to_date(...))]                                                                                                                                                                                                                                             </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">                                                                                                                                                                                                                                                                                                   </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  12:AGGREGATE [FINALIZE]                                                                                                                                                                                                                                                                             </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">  output: ...                                                                                                                                                                                                                                                                        </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">  group by: ...                                                                                                                                                                                                                                                    </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">                                                                                                                                                                                                                                                                                                   </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  24:AGGREGATE                                                                                                                                                                                                                                                                                        </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">  group by: ...                                                                                                                                                                                                                                        </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">                                                                                                                                                                                                                                                                                                   </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  23:EXCHANGE [HASH(...)]                                                                                                                                                                                                                                             </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">                                                                                                                                                                                                                                                                                                   </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  11:AGGREGATE [STREAMING]                                                                                                                                                                                                                                                                            </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">  group by: ...                                                                                                                                                                                                                                       </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">                                                                                                                                                                                                                                                                                                   </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  10:HASH JOIN [LEFT OUTER JOIN, PARTITIONED]                                                                                                                                                                                                                                                         </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">  hash predicates: ...                                                                                                                                                                                                                                                       </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">  other predicates: ... </span></span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">                                                                                                                                                                                                                                                                                                   </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">--22:EXCHANGE [HASH(...)]                                                                                                                                                                                                                                                                  </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">  </span>|<span class="string">                                                                                                                                                                                                                                                                                                </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">  09:SCAN HDFS [...]                                                                                                                                                                                                                                                            </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">     partitions=1/1 files=4 size=572.48MB                                                                                                                                                                                                                                                          </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">     predicates: ...                                                                                                                                            </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">                                                                                                                                                                                                                                                                                                   </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  21:EXCHANGE [HASH(...)]                                                                                                                                                                                                                                                                     </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">                                                                                                                                                                                                                                                                                                   </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  08:SCAN HDFS [...]                                                                                                                                                                                                                                                               </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">     partitions=2360/2360 files=2360 size=1.84GB                                                                                                                                                                                                                                                      </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">     predicates: ...                                                                                                                                                                                    </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">                                                                                                                                                                                                                                                                                                      </span>|</span><br><span class="line">|<span class="string"> 13:HASH JOIN [RIGHT OUTER JOIN, PARTITIONED]                                                                                                                                                                                                                                                           </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  hash predicates: ...                                                                                                                                                                                                             </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">                                                                                                                                                                                                                                                                                                      </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">--02:AGGREGATE [FINALIZE]                                                                                                                                                                                                                                                                             </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">  output: ...                                                                                                                                                                                                                                                                          </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">  group by: ...                                                                                                                                                                                                                                                       </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">                                                                                                                                                                                                                                                                                                   </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  20:AGGREGATE                                                                                                                                                                                                                                                                                        </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">  group by: ...                                                                                                                                                                                                                                             </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">                                                                                                                                                                                                                                                                                                   </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  19:EXCHANGE [HASH(...)]                                                                                                                                                                                                                                                </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">                                                                                                                                                                                                                                                                                                   </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  01:AGGREGATE [STREAMING]                                                                                                                                                                                                                                                                            </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">  group by: ...                                                                                                                                                                                                                                             </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">                                                                                                                                                                                                                                                                                                   </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  00:SCAN HDFS [warehouse.mar_house]                                                                                                                                                                                                                                                                  </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">     partitions=1/1 files=4 size=572.48MB                                                                                                                                                                                                                                                             </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">     predicates: ...                                                                                                                                  </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">                                                                                                                                                                                                                                                                                                      </span>|</span><br><span class="line">|<span class="string"> 07:AGGREGATE [FINALIZE]                                                                                                                                                                                                                                                                                </span>|<span class="string">                                                                                                                                                                                                                                                                                                   </span>|</span><br><span class="line">|<span class="string"> 18:AGGREGATE                                                                                                                                                                                                                                                                                           </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  group by: ...                                                                                                                                                                                                                                        </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">                                                                                                                                                                                                                                                                                                      </span>|</span><br><span class="line">|<span class="string"> 17:EXCHANGE [HASH(...)]                                                                                                                                                                                                                                                </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">                                                                                                                                                                                                                                                                                                      </span>|</span><br><span class="line">|<span class="string"> 06:AGGREGATE [STREAMING]                                                                                                                                                                                                                                                                               </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  group by: ...                                                                                                                                                                                                                                         </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">                                                                                                                                                                                                                                                                                                      </span>|</span><br><span class="line">|<span class="string"> 05:HASH JOIN [LEFT OUTER JOIN, PARTITIONED]                                                                                                                                                                                                                                                            </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  hash predicates: ...                                                                                                                                                                                                                                                         </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  other predicates: ...    </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">                                                                                                                                                                                                                                                                                                      </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">--16:EXCHANGE [HASH(...)]                                                                                                                                                                                                                                                                     </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  </span>|<span class="string">                                                                                                                                                                                                                                                                                                   </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">  04:SCAN HDFS [warehouse.mar_house mh]                                                                                                                                                                                                                                                               </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">     partitions=1/1 files=4 size=572.48MB                                                                                                                                                                                                                                                             </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">     predicates: ...                                                                                                                                              </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">                                                                                                                                                                                                                                                                                                      </span>|</span><br><span class="line">|<span class="string"> 15:EXCHANGE [HASH(...)]                                                                                                                                                                                                                                                                        </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">                                                                                                                                                                                                                                                                                                      </span>|</span><br><span class="line">|<span class="string"> 03:SCAN HDFS [...]                                                                                                                                                                                                                                                                  </span>|</span><br><span class="line">|<span class="string">    partitions=2360/2360 files=2360 size=1.84GB                                                                                                                                                                                                                                                         </span>|</span><br><span class="line">|<span class="string">    predicates: ...                                                                                                                                                                                         </span>|</span><br><span class="line">+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">Fetched 85 row(s) in 0.26s</span><br></pre></td></tr></table></figure><p>备注：由于sql为生产代码，不方便公开，仅适用示意代码，不影响表达主题<br>注意这行：</p><p>WARNING: The following tables are missing relevant table and/or column statistics.</p><p>db1.tab1, db2.tab2 </p><p>因此考虑对这两张表收集统计信息</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[hadoop15:21000] &gt; compute stats  db1.tab1;</span><br><span class="line">Query: compute stats  db1.tab1</span><br><span class="line"><span class="code">+-------------------------------------------+</span></span><br><span class="line">| summary                                   |</span><br><span class="line"><span class="code">+-------------------------------------------+</span></span><br><span class="line">| Updated 1 partition(s) and 100 column(s). |</span><br><span class="line"><span class="code">+-------------------------------------------+</span></span><br><span class="line">Fetched 1 row(s) in 4.87s</span><br><span class="line">[hadoop15:21000] &gt; compute stats db2.tab2;</span><br><span class="line">Query: compute stats db2.tab2</span><br><span class="line"><span class="code">+---------------------------------------------+</span></span><br><span class="line">| summary                                     |</span><br><span class="line"><span class="code">+---------------------------------------------+</span></span><br><span class="line">| Updated 2360 partition(s) and 96 column(s). |</span><br><span class="line"><span class="code">+---------------------------------------------+</span></span><br><span class="line">Fetched 1 row(s) in 148.34s</span><br><span class="line">[hadoop15:21000] &gt; </span><br><span class="line">[hadoop15:21000] &gt;  再次执行SQL</span><br><span class="line"><span class="code">+------------+</span>----------<span class="code">+-------------+</span>-----------<span class="code">+-------------+</span>----------结果集</span><br><span class="line"><span class="code">+------------+</span>----------<span class="code">+-------------+</span>-----------<span class="code">+-------------+</span>-----------+</span><br><span class="line">Fetched 10 row(s) in 0.94s</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;理论&lt;/h1&gt;&lt;p&gt;本文源自cloudera官网上的Impala文档，原名为《Impala Performance Guidelines and Best Pr
      
    
    </summary>
    
      <category term="impala" scheme="http://yoursite.com/categories/impala/"/>
    
    
      <category term="impala" scheme="http://yoursite.com/tags/impala/"/>
    
  </entry>
  
  <entry>
    <title>mapReduce job hangs</title>
    <link href="http://yoursite.com/2018/05/16/mapReduce-job-hangs/"/>
    <id>http://yoursite.com/2018/05/16/mapReduce-job-hangs/</id>
    <published>2018-05-16T03:56:17.000Z</published>
    <updated>2018-05-16T04:04:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>I tried to run simple word count as MapReduce job，<br>but mapReduce job hangs, waiting for AM container to be allocated.</p><p>Output from job:</p><pre><code>*** START ***15/12/25 17:52:50 INFO client.RMProxy: Connecting to ResourceManager at /0.0.0.0:803215/12/25 17:52:51 WARN mapreduce.JobResourceUploader: Hadoop command-line option parsing not performed. Implement the Tool interface and execute your application with ToolRunner to remedy this.15/12/25 17:52:51 INFO input.FileInputFormat: Total input paths to process : 515/12/25 17:52:52 INFO mapreduce.JobSubmitter: number of splits:515/12/25 17:52:52 INFO mapreduce.JobSubmitter: Submitting tokens for job: job_1451083949804_000115/12/25 17:52:53 INFO impl.YarnClientImpl: Submitted application application_1451083949804_000115/12/25 17:52:53 INFO mapreduce.Job: The url to track the job: http://hadoop-droplet:8088/proxy/application_1451083949804_0001/15/12/25 17:52:53 INFO mapreduce.Job: Running job: job_1451083949804_0001</code></pre><p>YarnApplicationState:<br>ACCEPTED: waiting for AM container to be allocated,launched and register with RM.</p><p><img src="https://i.stack.imgur.com/rSXpb.png" alt="Mou icon"></p><h1 id="诊断"><a href="#诊断" class="headerlink" title="诊断"></a>诊断</h1><p>You should check the status of Node managers in your cluster. If the NM nodes are short on disk space then RM will mark them “unhealthy” and those NMs can’t allocate new containers.</p><p>1) Check the Unhealthy nodes: http://&lt;active_RM&gt;:8088/cluster/nodes/unhealthy</p><p>If the “health report” tab says “local-dirs are bad” then it means you need to cleanup some disk space from these nodes.</p><p>2) Check the DFS dfs.data.dir property in hdfs-site.xml. It points the location on local file system where hdfs data is stored.</p><p>3) Login to those machines and use df -h &amp; hadoop fs - du -h commands to measure the space occupied.</p><p>4) Verify hadoop trash and delete it if it’s blocking you. hadoop fs -du -h /user/user_name/.Trash and hadoop fs -rm -r /user/user_name/.Trash/*</p><p>访问：<a href="http://yarn001:8088/cluster/nodes/unhealthy" target="_blank" rel="noopener">http://yarn001:8088/cluster/nodes/unhealthy</a></p><p>发现符合第一种情况，Healthy报告如下：</p><pre><code>1/1 local-dirs are bad: /tmp/hadoop-wang/nm-local-dir;1/1 log-dirs are bad: /Users/wang/soft/hadoop-2.7.5/logs/userlogs </code></pre><p>关于该问题网上说最常见原因是由于节点上的磁盘使用率超出了max-disk-utilization-per-disk-percentage（默认为90.0%）。<br>wangdeMacBook-Pro:hadoop-2.7.5 wang$ df -h</p><pre><code>Filesystem      Size   Used  Avail Capacity   iused   ifree %iused  Mounted on/dev/disk1     465Gi  446Gi   18Gi    97% 117017228 4822386   96%   /</code></pre><p>磁盘使用率已经是79%，确实是这个原因，但是这个可能只是表面原因。可以通过增加磁盘利用率阈值来缓解问题：<br>在yarn-site.xml中填写：</p><pre><code>&lt;property&gt;    &lt;name&gt;yarn.nodemanager.disk-health-checker.max-disk-utilization-per-disk-percentage&lt;/name&gt;    &lt;value&gt;98.5&lt;/value&gt;&lt;/property&gt;</code></pre><p>但是增加阈值的方法治标不治本，迟早有一天会超过你设置的98.5%。<br>建议清理磁盘空间或扩容。<br>over.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h1&gt;&lt;p&gt;I tried to run simple word count as MapReduce job，&lt;br&gt;but mapReduce jo
      
    
    </summary>
    
      <category term="hadoop" scheme="http://yoursite.com/categories/hadoop/"/>
    
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
      <category term="mapreduce" scheme="http://yoursite.com/tags/mapreduce/"/>
    
  </entry>
  
  <entry>
    <title>单链表反转(Java)</title>
    <link href="http://yoursite.com/2018/05/15/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC-Java/"/>
    <id>http://yoursite.com/2018/05/15/单链表反转-Java/</id>
    <published>2018-05-15T15:52:04.000Z</published>
    <updated>2018-05-15T15:54:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单链表反转-Java"><a href="#单链表反转-Java" class="headerlink" title="单链表反转(Java)"></a>单链表反转(Java)</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><strong>单链表反转</strong>使用p、q、r三个指针配合工作，使得两个节点间的指向反向，同时用r记录剩下的链表。基本流程如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/5266042-f6c75291059014f6.jpg" alt=""></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">public class ReverseList &#123;</span><br><span class="line">    public static <span class="keyword">Node</span> <span class="title">reverseList</span>(<span class="keyword">Node</span> <span class="title">head</span>) &#123;</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">p</span> = new <span class="keyword">Node</span><span class="title">(0</span>);</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">q</span> = new <span class="keyword">Node</span><span class="title">(0</span>);</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">r</span> = new <span class="keyword">Node</span><span class="title">(0</span>);</span><br><span class="line">        p = head;</span><br><span class="line">        q = head.next;</span><br><span class="line">        p.next = null;</span><br><span class="line"></span><br><span class="line">        while (q != null) &#123;</span><br><span class="line">            r = q.next;</span><br><span class="line">            q.next = p;</span><br><span class="line">            p = q;</span><br><span class="line">            q = r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        head = p;</span><br><span class="line"></span><br><span class="line">        return head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        int count = <span class="number">9</span>;</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">t</span> = new <span class="keyword">Node</span><span class="title">(1</span>);</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">x</span> = t;</span><br><span class="line"></span><br><span class="line">        for (int i = <span class="number">2</span>; i <span class="tag">&lt;= count; i++) &#123;</span></span><br><span class="line"><span class="tag">            x = (x.next = new Node(i));</span></span><br><span class="line"><span class="tag">        &#125;</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        t = reverseList(t);</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        while (t != null) &#123;</span></span><br><span class="line"><span class="tag">            System.out.print(t.val + " ");</span></span><br><span class="line"><span class="tag">            t = t.next;</span></span><br><span class="line"><span class="tag">        &#125;</span></span><br><span class="line"><span class="tag">    &#125;</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    public static class Node &#123;</span></span><br><span class="line"><span class="tag">        int val;</span></span><br><span class="line"><span class="tag">        Node next;</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        Node(int v) &#123;</span></span><br><span class="line"><span class="tag">            val = v;</span></span><br><span class="line"><span class="tag">        &#125;</span></span><br><span class="line"><span class="tag">    &#125;</span></span><br><span class="line"><span class="tag">&#125;</span></span><br></pre></td></tr></table></figure><p>转载：<br><a href="http://www.jianshu.com/p/5043be2fc875" target="_blank" rel="noopener">http://www.jianshu.com/p/5043be2fc875</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单链表反转-Java&quot;&gt;&lt;a href=&quot;#单链表反转-Java&quot; class=&quot;headerlink&quot; title=&quot;单链表反转(Java)&quot;&gt;&lt;/a&gt;单链表反转(Java)&lt;/h1&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;header
      
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="singly linked list" scheme="http://yoursite.com/tags/singly-linked-list/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
</feed>
